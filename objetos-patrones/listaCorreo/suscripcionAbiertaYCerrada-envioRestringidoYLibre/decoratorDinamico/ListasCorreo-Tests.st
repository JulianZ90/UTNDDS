TestCase subclass: #ListaTest	instanceVariableNames: 'leo nico pablo'	classVariableNames: ''	poolDictionaries: ''	category: 'ListasCorreo-Tests'!!ListaTest methodsFor: 'as yet unclassified' stamp: 'leo 4/22/2013 12:10'!setUp	EmailSenderProvider emailSender: MockEmailSender new.	leo := Miembro mail: 'lgassman@gmail.com'.	nico := Miembro mail: 'npasserini@gmail.com'.	pablo := Miembro mail: 'tesonep@gmail.com'! !!ListaTest methodsFor: 'as yet unclassified' stamp: 'leo 4/22/2013 12:07'!tearDown	EmailSenderProvider emailSender: nil! !ListaTest subclass: #ListaCerradaTest	instanceVariableNames: 'lista'	classVariableNames: ''	poolDictionaries: ''	category: 'ListasCorreo-Tests'!!ListaCerradaTest methodsFor: 'as yet unclassified' stamp: 'leo 4/22/2013 12:20'!testAprobar	| lista |	lista := ListaCerrada new.	lista suscribir: leo.	lista aprobar: leo.	self assert: (lista miembros includes: leo) description: 'Leo deberia ser parte de los miembros'.	self		assert: (lista miembrosPendientes includes: leo) not		description: 'leo no debe estar en los miembros pendientes despues de de aprobarse la suscripcion'! !!ListaCerradaTest methodsFor: 'as yet unclassified' stamp: 'leo 4/22/2013 12:22'!testRechazar	| lista |	lista := ListaCerrada new.	lista suscribir: leo.	lista rechazar: leo.	self assert: (lista miembros includes: leo) not description: 'Leo no deberia ser parte de los miembros'.	self assert: (lista miembrosPendientes includes: leo) not description: 'leo no debe estar en los miembros pendientes '! !!ListaCerradaTest methodsFor: 'as yet unclassified' stamp: 'leo 4/22/2013 12:19'!testSuscribir	| lista |	lista := ListaCerrada new.	lista suscribir: leo.	self assert: (lista miembrosPendientes includes: leo) description: 'Leo deberia ser parte de los miembros pendientes'.	self		assert: (lista miembros includes: leo) not		description: 'leo no debe estar en los miembros activos antes de aprobarse la suscripcion'! !ListaTest subclass: #ListaRestringidaTest	instanceVariableNames: 'lista'	classVariableNames: ''	poolDictionaries: ''	category: 'ListasCorreo-Tests'!!ListaRestringidaTest methodsFor: 'as yet unclassified' stamp: 'leo 4/22/2013 12:41'!setUp	| listaBase |	super setUp.	listaBase := ListaCorreo new.	lista := ListaRestringida new.	lista listaDecorada: listaBase.	lista agregarMiembro: leo.	lista agregarMiembro: nico.	lista agregarMiembro: pablo! !!ListaRestringidaTest methodsFor: 'as yet unclassified' stamp: 'leo 4/22/2013 12:32'!testEnviarMiembro	| unPost |	unPost := Post from: leo mailDefault subject: 'hola' content: 'yeah'.	lista enviar: unPost.	EmailSenderProvider emailSender assertEnviados: 2 post: unPost description: 'se esperaba que se envie a pablo y nico'! !!ListaRestringidaTest methodsFor: 'as yet unclassified' stamp: 'leo 4/22/2013 12:42'!testEnviarNoMiembro	| unPost |	unPost := Post from: 'fulano@gmail.com' subject: 'hola' content: 'yeah'.	self should: [ lista enviar: unPost ] raise: Exception! !ListaTest subclass: #CambiarModoEnvioTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ListasCorreo-Tests'!!CambiarModoEnvioTest methodsFor: 'as yet unclassified' stamp: 'leo 4/22/2013 12:51'!testLibreARestringida	| lista |	lista := ListaCorreo new.	lista agregarMiembro: leo.	lista asRestringida.	self should: [ lista enviar: (Post from: 'fulano@gmail.com' subject: 'blah' content: 'bleh') ] raise: Exception! !!CambiarModoEnvioTest methodsFor: 'as yet unclassified' stamp: 'leo 4/25/2013 17:45'!testRestringidaALibre	| lista listaBase post |	listaBase := ListaCorreo new.	listaBase agregarMiembro: leo.	lista := ListaRestringida new.	lista listaDecorada: listaBase.	lista asLibre.	post := Post from: 'fulano@gmail.com' subject: 'blah' content: 'bleh'.	lista enviar: post.	EmailSenderProvider emailSender assertEnviados: 1 post: post description: 'Se deberia haber mandado el post'! !ListaTest subclass: #ListaLibreTest	instanceVariableNames: 'lista'	classVariableNames: ''	poolDictionaries: ''	category: 'ListasCorreo-Tests'!!ListaLibreTest methodsFor: 'as yet unclassified' stamp: 'leo 4/22/2013 12:31'!setUp	super setUp.	lista := ListaCorreo new.	lista agregarMiembro: leo.	lista agregarMiembro: nico.	lista agregarMiembro: pablo! !!ListaLibreTest methodsFor: 'as yet unclassified' stamp: 'leo 4/22/2013 12:30'!testEnviarMiembro	| unPost |	unPost := Post from: leo mailDefault subject: 'hola' content: 'yeah'.	lista enviar: unPost.	EmailSenderProvider emailSender assertEnviados: 2 post: unPost description: 'se esperaba que se envie a pablo y nico'! !!ListaLibreTest methodsFor: 'as yet unclassified' stamp: 'leo 4/22/2013 12:30'!testEnviarNoMiembro	| unPost |	unPost := Post from: 'fulano@gmail.com' subject: 'hola' content: 'yeah'.	lista enviar: unPost.	EmailSenderProvider emailSender		assertEnviados: 3		post: unPost		description: 'se esperaba que se envie a leo, pablo y nico'! !TestAsserter subclass: #MockEmailSender	instanceVariableNames: 'emailsEnviados'	classVariableNames: ''	poolDictionaries: ''	category: 'ListasCorreo-Tests'!!MockEmailSender methodsFor: 'accessing' stamp: 'leo 4/22/2013 11:58'!emailsEnviados	^ emailsEnviados! !!MockEmailSender methodsFor: 'accessing' stamp: 'leo 4/22/2013 11:58'!emailsEnviados: anObject	emailsEnviados := anObject! !!MockEmailSender methodsFor: 'accessing' stamp: 'leo 4/22/2013 11:57'!initialize	emailsEnviados := Set new! !!MockEmailSender methodsFor: 'uso' stamp: 'leo 4/22/2013 11:58'!send: unEmail	self emailsEnviados add: unEmail! !!MockEmailSender methodsFor: 'assert' stamp: 'leo 4/22/2013 12:03'!assert: unMensaje cantidad: cantidad post: unPost	self		assert: cantidad		equals:			(self emailsEnviados				count: [ :unEmail | ((unEmail from = unPost from & unEmail content) = unPost content & unEmail subject) = unPost subject ])! !!MockEmailSender methodsFor: 'assert' stamp: 'leo 4/22/2013 12:06'!assertEnviados: cantidad post: unPost description: message	| cantidadEnviados |	cantidadEnviados := self emailsEnviados		count: [ :unEmail | unEmail from = unPost from & (unEmail content = unPost content) & (unEmail subject = unPost subject) ].	self assert: cantidad = cantidadEnviados description: message! !ListaTest subclass: #ListaAbiertaTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ListasCorreo-Tests'!!ListaAbiertaTest methodsFor: 'as yet unclassified' stamp: 'leo 4/22/2013 12:15'!testSuscribir	| lista |	lista := ListaCorreo new.	lista suscribir: leo.	self assert: (lista miembros includes: leo) description: 'Se esperaba que leo sea parte de los miembros'! !